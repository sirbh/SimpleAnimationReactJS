{"version":3,"sources":["components/Page/Page.module.css","components/Page/Page.js","components/Pages.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","page","props","className","cssClasses","Page","heading","btnArr","map","ele","i","key","to","link","btn","name","PageOne","PageTwo","PageThree","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,IAAM,oB,uMCkBrEC,EAdF,SAACC,GAGV,OAAO,6BAASC,UAAWC,IAAWC,MACtC,4BAAKH,EAAMI,SACX,uQACA,6BACMJ,EAAMK,OAAOC,KAAI,SAACC,EAAIC,GAAL,OAAS,kBAAC,IAAD,CAASC,IAAKD,EAAGE,GAAIH,EAAII,KAAMV,UAAWC,IAAWU,KAC3EL,EAAIM,YCVLC,EAAS,WAElB,OAAO,kBAACX,EAAD,CAAMC,QAAQ,eAAeC,OAAQ,CAAC,CAACQ,KAAK,OAAOF,KAAK,eAGtDI,EAAS,WAElB,OAAO,kBAACZ,EAAD,CAAMC,QAAQ,kBAAkBC,OAAQ,CAAC,CAACQ,KAAK,OAAOF,KAAK,WAAW,CAACE,KAAK,YAAYF,KAAK,SAI3FK,EAAW,WAEpB,OAAO,kBAACb,EAAD,CAAMC,QAAQ,kBAAkBC,OAAQ,CAAC,CAACQ,KAAK,YAAYF,KAAK,eCC5DM,MAVf,WACE,OACK,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,OAAK,EAACC,UAAWL,IACvC,kBAAC,IAAD,CAAOG,KAAK,UAAUC,OAAK,EAACC,UAAWJ,MCA5BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAS,2BACrB,kBAAC,EAAD,QAGLC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a1f5282.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Page\":\"Page_Page__306F8\",\"animate1\":\"Page_animate1__2xsdo\",\"btn\":\"Page_btn__3AGMH\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport cssClasses from './Page.module.css';\r\n\r\n\r\nconst page = (props)=>\r\n{   \r\n    \r\n    return <section className={cssClasses.Page}>\r\n    <h1>{props.heading}</h1>\r\n    <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Corporis dolorum dolorem modi cupiditate quia doloribus impedit facere odio neque adipisci, nobis voluptate vero fugiat deleniti voluptas, est voluptates dignissimos tempora.</p>\r\n    <div>\r\n         {props.btnArr.map((ele,i)=><NavLink key={i} to={ele.link} className={cssClasses.btn}>\r\n             {ele.name}\r\n        </NavLink>)}\r\n    </div>\r\n   </section>\r\n}\r\n\r\nexport default page","import React from \"react\"\r\nimport Page from './Page/Page'\r\n\r\nexport const PageOne =()=>\r\n{\r\n    return <Page heading=\"Presentation\" btnArr={[{name:'Next',link:'/page-2'}]}></Page>\r\n}\r\n\r\nexport const PageTwo =()=>\r\n{\r\n    return <Page heading=\"Presentation -2\" btnArr={[{name:'Next',link:'/page-3'},{name:'Prev Page',link:'/'}]}></Page>\r\n    \r\n}\r\n\r\nexport const PageThree =()=>\r\n{\r\n    return <Page heading=\"Presentation -3\" btnArr={[{name:'Prev Page',link:'/page-2'}]}></Page>\r\n    \r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Switch,Route} from 'react-router-dom'\r\nimport {PageOne} from './components/Pages'\r\nimport {PageTwo} from './components/Pages'\r\nimport {PageThree} from './components/Pages'\r\n\r\nfunction App() {\r\n  return (\r\n       <Switch>\r\n         <Route path='/' exact component={PageOne}></Route>\r\n         <Route path='/page-2' exact component={PageTwo}></Route>\r\n         <Route path='/page-3' exact component={PageThree}></Route>\r\n       </Switch>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename=\"/SimpleAnimationReactJS\">\r\n       <App/>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}